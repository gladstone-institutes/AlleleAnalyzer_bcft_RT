#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_sgRNAs.py generates sgRNAs as part of ExcisionFinder. Written in Python v 3.6.1.
Kathleen Keough and Michael Olvera 2018.

Usage:
	make_pretty_igv.py [-h] <guides_file> <igv_formatted_file_name> <track_name> [--no_score]

Arguments:
	guides_file				Non-IGV-formatted guides file generated by gen_sgRNAs.py 
	igv_formatted_file_name	Name for the outputted IGV-formatted guides BED file.
	track_name				Name of the track in IGV.
Options:
	-h 						Show this help text and exit.
	--no_score				Don't color guides based on variant position, e.g. when designing for reference. 

"""

import pandas as pd
import sys
from docopt import docopt
import regex
import re
from Bio import SeqIO
import cas_object
from collections import Counter
import numpy as np

__version__ = "0.0.1"

# get rid of annoying false positive Pandas error

pd.options.mode.chained_assignment = None
TRACK_COLS = [
    "128,0,128",
    "0,128,128",
    "177,89,40",
    "178,223,138",
    "202,178,214",
    "227,26,28",
    "251,154,153",
    "253,191,111",
    "255,127,0",
    "255,255,153",
    "31,120,180",
    "51,160,44",
]


def adjusted_length(row):
    """
	Adds on the length of the PAM to the sequnce length.
	"""
    cas = cas_object.get_cas_enzyme(row["cas_type"])
    if row["strand"] == "positive":
        return (row["start"], row["stop"] + len(cas.forwardPam))
    else:
        return (row["start"] - len(cas.forwardPam), row["stop"])


def main(args):
    print(args)
    gene_bed = pd.read_csv(args["<guides_file>"], sep="\t")
    outfile = args["<igv_formatted_file_name>"]
    track_name = args["<track_name>"]
    cas_list = list(Counter(gene_bed["cas_type"]).keys())

    gene_bed["full_start"], gene_bed["full_stop"] = zip(
        *gene_bed.apply(adjusted_length, axis=1)
    )
    if not args["--no_score"]:
        gene_bed["score"] = 1000 * (1 / (gene_bed["variant_position_in_guide"].replace(np.nan, 0) + 1))
    if "rsID" in gene_bed.columns:
        gene_bed["label"] = gene_bed.apply(
            lambda row: str(row["guide_id"])
            + "_"
            + str(row["variant_position_in_guide"])
            + "_"
            + str(row["rsID"])
            + "_AF"
            + str(row["AF"]),
            axis=1,
        )
    elif args["--no_score"]:
        gene_bed["label"] = gene_bed["guide_id"]
        gene_bed["score"] = 100
    else:
        gene_bed["label"] = gene_bed.apply(
            lambda row: str(row["guide_id"])
            + "_"
            + str(row["variant_position_in_guide"]),
            axis=1,
        )

    gene_bed["color"] = gene_bed.apply(
        lambda row: TRACK_COLS[cas_list.index(row["cas_type"]) % len(TRACK_COLS)],
        axis=1,
    )
    gene_bed['chrom'] = gene_bed['chrom'].astype(str).str.split('.').str[0]
    gene_bed_display = gene_bed[
        [
            "chrom",
            "full_start",
            "full_stop",
            "label",
            "score",
            "strand",
            "start",
            "stop",
            "color",
        ]
    ]

    header_str = f"track name={track_name} description=AS cut sites as produced by ExcisionFinder visibility=3 useScore=1"

    gene_bed_display.replace({'positive':'+','negative':'-'}).to_csv(
        outfile + ".bed",
        sep="\t",
        index=False,
        header=[header_str, "", "", "", "", "", "", "", ""],
    )


if __name__ == "__main__":
    arguments = docopt(__doc__, version=__version__)
    main(arguments)
