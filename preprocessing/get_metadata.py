#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
get_metadata.py takes in an hdf5 file (.hdf5 or .h5) produced from ExcisionFinder and outputs the 
Written in Python v 3.6.1. 
Kathleen Keough et al 2018.

Usage:
	get_metadata.py <hdf5_file> 

Arguments:
	hdf5_file           The sample hdf5 file produced from an ExcisionFinder script. 
"""
import pandas as pd
from docopt import docopt
import os, sys, re
from datetime import datetime

__version__='1.0.0'



def add_metadata(out_hdf_fname, arg_dict, script_name, version, filetype):
    """
    Adds metadata to the output hdf file, containing all the options used in the script, when it was run, and what version was used.
    """
    store = pd.HDFStore(out_hdf_fname)
    meta = dict(time=str(datetime.now()).split('.')[0], script=script_name, version=version, filetype=filetype)
    store.get_storer('all').attrs.metadata = meta
    store.get_storer('all').attrs.arguments = arg_dict
    store.close()


def main(args):
	loaded_hdf = pd.HDFStore(args['<hdf5_file>'])
	try:
		metadata = loaded_hdf.get_storer('all').attrs.metadata
		params = loaded_hdf.get_storer('all').attrs.arguments
	except IOError:
		print('This does not look like an hdf5 files from ExcisionFinder.')
		exit()
	#metadata = dict(metadata)
	#args = dict(args)

	print(f"{metadata['filetype']} file generated by {metadata['script']} version {metadata['version']}, on {metadata['time']}.")
	print("Ran with the following arguments:")
	for arg in params:
		format_arg = re.sub(r"([<>])", '', arg)
		print( format_arg, ':', params[arg])

	loaded_hdf.close()

if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    main(arguments)